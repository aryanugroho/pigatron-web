apply from: 'config.gradle'

buildscript {
	ext {
		springBootVersion = '1.3.3.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('com.github.ben-manes:gradle-versions-plugin:0.12.0')
		classpath("com.moowork.gradle:gradle-node-plugin:0.12")
		classpath("com.moowork.gradle:gradle-gulp-plugin:0.12")
	}
}

apply plugin: 'com.github.ben-manes.versions'

allprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'spring-boot'
	apply plugin: 'maven'
	group = 'com.pigatron.web'
	version = '0.0.1-SNAPSHOT'
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		compile('org.apache.commons:commons-lang3:3.4')

		testCompile("org.easytesting:fest-assert-core:2.0M10")
		testCompile('org.springframework.boot:spring-boot-starter-test')
	}
	idea {
		module {
			excludeDirs += file('node_modules')
			excludeDirs += file('bower_components')
			testSourceDirs += file('src/test/unit')
			testSourceDirs += file('src/test/integration')
			testSourceDirs += file('src/test/functional')
		}
	}
	sourceSets {
		test {
			java {
				srcDirs = ["src/test/java", "src/test/unit"]
			}
		}
		integrationTest {
			java {
				compileClasspath += main.output + test.output
				runtimeClasspath += main.output + test.output
				srcDirs = ["src/test/integration"]
			}
			resources.srcDir file('src/test/resources')
		}
		functionalTest {
			java {
				compileClasspath += main.output + test.output + integrationTest.output
				runtimeClasspath += main.output + test.output + integrationTest.output
				srcDirs = ["src/test/functional"]
			}
			resources.srcDir file('src/test/resources')
		}
	}
	configurations {
		integrationTestCompile.extendsFrom testCompile
		integrationTestRuntime.extendsFrom testRuntime
		functionalTestCompile.extendsFrom integrationTestCompile
		functionalTestRuntime.extendsFrom integrationTestRuntime
	}
	task integrationTest(type: Test) {
		testClassesDir = sourceSets.integrationTest.output.classesDir
		classpath = sourceSets.integrationTest.runtimeClasspath
		outputs.upToDateWhen { false }
	}
	task functionalTest(type: Test) {
		testClassesDir = sourceSets.functionalTest.output.classesDir
		classpath = sourceSets.functionalTest.runtimeClasspath
		outputs.upToDateWhen { false }
	}
}


apply plugin: "com.moowork.node"
node {
	version = '6.2.0'
	download = true
}

subprojects {
	// Web Resource Handling
	apply plugin: "com.moowork.node"
	task bowerInstall(type: NodeTask) {
		script = file('../node_modules/bower/bin/bower')
		args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}/caches/bower/cache",
				"--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
				"--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
				'install']
		inputs.files file('bower.json')
		outputs.dir file('bower_components')
		dependsOn ':npmInstall'
	}

	task webResourceBuildLocal(type: NodeTask) {
		script = file('../node_modules/gulp/bin/gulp.js')
		args = ['localBuild']
		inputs.dir file("src/main/resources/static")
		outputs.dir file("$buildDir/resources/main/static")
	}

	task webResourceBuildLib(type: NodeTask) {
		script = file('../node_modules/gulp/bin/gulp.js')
		args = ['libBuild']
		inputs.file file("gulpfile.js")
		inputs.dir file("bower_components")
		outputs.dir file("$buildDir/resources/main/static")
		dependsOn bowerInstall
	}

	processResources.dependsOn webResourceBuildLocal
	build.dependsOn webResourceBuildLib
	webResourceBuildLocal.mustRunAfter webResourceBuildLib

	task cleanWebResources(type: Delete) {
		delete 'bower_components'
	}
	clean.dependsOn cleanWebResources
}



jar {
	baseName = 'pigatron-web'
	version = versionName
}
sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {
	compile project(":web-admin-shop")
	compile project(":web-public-cms")
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.10'
}

bootRepackage {
	executable = true
}

task buildInfo {
	def cmd = "git describe --long --tags --dirty --always"
	def proc = cmd.execute()
	ext.revision = proc.text.trim()
	def props = new Properties()
	props.setProperty("pigatron.revision", ext.revision);
	def propFile = new File("./src/main/resources/application.properties");
	propFile.createNewFile();
	props.store(propFile.newWriter(), null);
}
bootRepackage.dependsOn buildInfo